# -*- coding: utf-8 -*-
"""12 fake news prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uWHpYOa37TurI-z7SE7X1ptQg-1agSXu

1 - fake news
0 - real news

importing the libraries
"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

print(stopwords.words('english'))

"""data preprocessing"""

news_dataset = pd.read_csv('/content/train.csv')

print(news_dataset)

news_dataset.shape

news_dataset.head()

news_dataset.tail()

# counting the number of missing values
news_dataset.isnull().sum()

# replacing the null values with empty string
news_dataset = news_dataset.fillna('')

news_dataset.isnull().sum()

news_dataset['content'] = news_dataset['author']+' '+news_dataset['title']

print(news_dataset['content'])

"""separating data and label"""

X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']

print(X)
print(Y)

"""stemming:
process of reducing a word to its root word
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming)

print(news_dataset['content'])

X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

"""converting the textual data to numerical data"""

'''
tf - term frequency
idf - inverse document frequency
'''

vectorizer = TfidfVectorizer()
vectorizer.fit(X)

X = vectorizer.transform(X)

print(X)

"""splitting dataset into train and test"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

"""training the model - logistic regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""evaluation - accuracy score"""

# accuracy score on the train data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("accuracy score train data: ", training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("accuracy score test data: ", test_data_accuracy)

"""making a predictive system"""

X_new = X_test[3]

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is Real')
else:
  print('The news is Fake')

print(Y_test[3])

